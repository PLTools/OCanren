fun q  -> call_fresh (fun x  -> x =/= (!(A x))), all answers {
q=_.10; 
}
fun q  ->
  call_fresh
    (fun x  ->
       call_fresh
         (fun y  ->
            call_fresh
              (fun z  ->
                 (x =/= y) &&&
                   ((x === (![!0; z; !1])) &&& (y === (![!0; !1; !1])))))), all answers {
q=_.10; 
}
fun q  ->
  call_fresh
    (fun x  ->
       call_fresh
         (fun y  ->
            call_fresh
              (fun z  ->
                 (x =/= y) &&&
                   ((x === (![!0; z; !1])) &&&
                      ((y === (![!0; !1; !1])) &&&
                         ((z === (!1)) &&& ((![x; y]) === q))))))), all answers {
}
fun q  ->
  call_fresh
    (fun x  ->
       call_fresh
         (fun y  ->
            call_fresh
              (fun z  ->
                 (x =/= y) &&&
                   ((x === (![!0; z; !1])) &&&
                      ((y === (![!0; !1; !1])) &&& (z === (!0))))))), all answers {
q=_.10; 
}
fun q  ->
  call_fresh
    (fun x  ->
       call_fresh
         (fun y  ->
            call_fresh
              (fun z  ->
                 (z === (!0)) &&&
                   ((x =/= y) &&&
                      ((x === (![!0; z; !1])) &&& (y === (![!0; !1; !1]))))))), all answers {
q=_.10; 
}
fun q  ->
  call_fresh
    (fun x  ->
       call_fresh
         (fun y  ->
            call_fresh
              (fun z  ->
                 (x === (![!0; z; !1])) &&&
                   ((y === (![!0; !1; !1])) &&& (x =/= y))))), all answers {
q=_.10; 
}
fun q  ->
  call_fresh
    (fun x  ->
       call_fresh
         (fun y  ->
            call_fresh
              (fun z  ->
                 (z === (!1)) &&&
                   ((x =/= y) &&&
                      ((x === (![!0; z; !1])) &&& (y === (![!0; !1; !1]))))))), all answers {
}
fun q  ->
  call_fresh
    (fun x  ->
       call_fresh
         (fun y  ->
            call_fresh
              (fun z  ->
                 (z === (!1)) &&&
                   ((x === (![!0; z; !1])) &&&
                      ((y === (![!0; !1; !1])) &&& (x =/= y)))))), all answers {
}
fun q  ->
  call_fresh
    (fun x  ->
       call_fresh (fun y  -> ((![x; !1]) =/= (![!2; y])) &&& (x === (!2)))), all answers {
q=_.10; 
}
fun q  ->
  call_fresh
    (fun x  ->
       call_fresh (fun y  -> ((![x; !1]) =/= (![!2; y])) &&& (y === (!1)))), all answers {
q=_.10; 
}
fun q  ->
  call_fresh
    (fun x  ->
       call_fresh
         (fun y  ->
            ((![x; !1]) =/= (![!2; y])) &&& ((x === (!2)) &&& (y === (!1))))), all answers {
}
fun q  ->
  call_fresh
    (fun x  ->
       call_fresh
         (fun y  -> ((![x; !1]) =/= (![!2; y])) &&& ((![x; y]) === q))), all answers {
q=[_.11=/= 2;; _.12=/= 1;]; 
}
fun q  ->
  call_fresh
    (fun x  ->
       call_fresh
         (fun y  ->
            ((![x; !1]) =/= (![!2; y])) &&&
              ((x === (!2)) &&& ((![x; y]) === q)))), all answers {
q=[2; _.12=/= 1;]; 
}
fun q  ->
  call_fresh
    (fun x  ->
       call_fresh
         (fun y  ->
            ((![x; !1]) =/= (![!2; y])) &&&
              ((x === (!2)) &&& ((y === (!9)) &&& ((![x; y]) === q))))), all answers {
q=[2; 9]; 
}
fun q  ->
  call_fresh
    (fun a  ->
       call_fresh
         (fun d  ->
            ((![a; d]) === q) &&&
              ((q =/= (![!5; !6])) &&& ((a === (!5)) &&& (d === (!6)))))), all answers {
}
fun q  ->
  call_fresh
    (fun x  ->
       call_fresh
         (fun y  ->
            ((![x; !1]) =/= (![!2; y])) &&&
              ((x === (!2)) &&& ((y === (!1)) &&& ((![x; y]) === q))))), all answers {
}
fun q  ->
  call_fresh
    (fun a  ->
       call_fresh
         (fun x  ->
            call_fresh
              (fun z  ->
                 (a =/= (![x; !1])) &&& ((a === (![z; !1])) &&& (x === z))))), all answers {
}
fun q  ->
  call_fresh
    (fun a  ->
       call_fresh
         (fun x  ->
            call_fresh
              (fun z  ->
                 (a =/= (![x; !1])) &&&
                   ((a === (![z; !1])) &&&
                      ((x === (!5)) &&& ((![x; z]) === q)))))), all answers {
q=[5; _.13=/= 5;]; 
}
fun q  -> (!3) =/= (!4), all answers {
q=_.10; 
}
fun q  -> (!3) =/= (!3), all answers {
}
fun q  -> (((!5) =/= q) &&& ((!6) =/= q)) &&& (q === (!5)), all answers {
}
fun q  ->
  call_fresh
    (fun a  ->
       call_fresh
         (fun d  ->
            ((![a; d]) === q) &&& ((q =/= (![!5; !6])) &&& (a === (!5))))), all answers {
q=[5; _.12=/= 6;]; 
}
fun q  -> call_fresh (fun a  -> ((!3) === a) &&& (a =/= (!4))), all answers {
q=_.10; 
}
fun q  -> ((!4) =/= q) &&& ((!3) =/= q), all answers {
q=_.10=/= 3;=/= 4;; 
}
fun q  -> (q =/= (!5)) &&& (q =/= (!5)), all answers {
q=_.10=/= 5;; 
}
fun q  ->
  let foo x = call_fresh (fun a  -> x =/= a)  in call_fresh (fun a  -> foo a), all answers {
q=_.10; 
}
fun q  ->
  call_fresh
    (fun x  -> call_fresh (fun y  -> ((![x; y]) === q) &&& (x =/= y))), all answers {
q=[_.11=/= _.12;; _.12]; 
}
fun q  ->
  call_fresh
    (fun a  ->
       call_fresh (fun d  -> ((![a; d]) === q) &&& (q =/= (![!5; !6])))), all answers {
q=[_.11=/= 5;; _.12=/= 6;]; 
}
fun q  ->
  call_fresh
    (fun a  ->
       call_fresh
         (fun d  ->
            ((![a; d]) === q) &&& ((q =/= (![!5; !6])) &&& (a === (!3))))), all answers {
q=[3; _.12]; 
}
fun q  ->
  call_fresh
    (fun x  -> call_fresh (fun y  -> ((![x; y]) === q) &&& (y =/= x))), all answers {
q=[_.11; _.12=/= _.11;]; 
}
fun q  ->
  call_fresh
    (fun x  ->
       call_fresh (fun y  -> ((![x; y]) === q) &&& ((x =/= y) &&& (y =/= x)))), all answers {
q=[_.11=/= _.12;; _.12]; 
}
fun q  ->
  call_fresh
    (fun x  ->
       call_fresh (fun y  -> ((![x; y]) === q) &&& ((x =/= y) &&& (x =/= y)))), all answers {
q=[_.11=/= _.12;; _.12]; 
}
fun q  -> (q =/= (!5)) &&& ((!5) =/= q), all answers {
q=_.10=/= 5;; 
}
fun q  ->
  call_fresh
    (fun x  ->
       call_fresh
         (fun y  ->
            ((![x; y]) === q) &&&
              (((![x; y]) =/= (![!5; !6])) &&& (x =/= (!5))))), all answers {
q=[_.11=/= 5;; _.12]; 
}
fun q  ->
  call_fresh
    (fun x  ->
       call_fresh
         (fun y  ->
            ((![x; y]) === q) &&&
              ((x =/= (!5)) &&& ((![x; y]) =/= (![!5; !6]))))), all answers {
q=[_.11=/= 5;; _.12]; 
}
fun q  ->
  call_fresh
    (fun x  ->
       call_fresh
         (fun y  ->
            (x =/= (!5)) &&&
              (((![x; y]) =/= (![!5; !6])) &&& ((![x; y]) === q)))), all answers {
q=[_.11=/= 5;; _.12]; 
}
fun q  ->
  call_fresh
    (fun x  ->
       call_fresh
         (fun y  ->
            ((!5) =/= x) &&&
              (((![x; y]) =/= (![!5; !6])) &&& ((![x; y]) === q)))), all answers {
q=[_.11=/= 5;; _.12]; 
}
fun q  ->
  call_fresh
    (fun x  ->
       call_fresh
         (fun y  ->
            ((!5) =/= x) &&&
              (((![y; x]) =/= (![!6; !5])) &&& ((![x; y]) === q)))), all answers {
q=[_.11=/= 5;; _.12]; 
}
fun x  ->
  call_fresh
    (fun y  ->
       call_fresh (fun z  -> (x =/= (![y; !2])) &&& (x === (![z; !2])))), all answers {
x=[_.12=/= _.11;; 2]; 
}
fun q  -> distincto ((!2) % ((!3) %< q)), all answers {
q=_.23=/= 3;=/= 2;; 
}
fun q  -> rembero (!1) ((!1) % ((!2) % ((!1) %< (!3)))) q, all answers {
q=[1; 2; 1; 3]; 
q=[2; 1; 3]; 
q=[1; 2; 3]; 
q=[2; 3]; 
}
fun q  -> rembero (!1) ((!1) % ((!2) %< (!3))) ((!1) % ((!2) %< (!3))), all answers {
q=[_.10]; 
}
fun q  -> rembero (!1) ((!1) % ((!2) % ((!1) %< (!3)))) q, all answers {
q=[2; 3]; 
}
fun q  -> rembero (!1) ((!1) % ((!2) %< (!3))) ((!1) % ((!2) %< (!3))), all answers {
}
