fun q -> (=/=) q !1, all answers {
q=_.10 [=/= 1];
}
fun q ->
  call_fresh
    (fun x ->
       call_fresh
         (fun y ->
            call_fresh
              (fun z ->
                 conj ((=/=) x y)
                   (conj ((===) x ((!!) [!0; z; !1]))
                      ((===) y ((!!) [!0; !1; !1])))))), all answers {
q=_.10;
}
fun q ->
  call_fresh
    (fun x ->
       call_fresh
         (fun y ->
            call_fresh
              (fun z ->
                 conj ((=/=) x y)
                   (conj ((===) x ((!!) [!0; z; !1]))
                      (conj ((===) y ((!!) [!0; !1; !1])) ((===) z !0)))))), all answers {
q=_.10;
}
fun q ->
  call_fresh
    (fun x ->
       call_fresh
         (fun y ->
            call_fresh
              (fun z ->
                 conj ((===) z !0)
                   (conj ((=/=) x y)
                      (conj ((===) x ((!!) [!0; z; !1]))
                         ((===) y ((!!) [!0; !1; !1]))))))), all answers {
q=_.10;
}
fun q ->
  call_fresh
    (fun x ->
       call_fresh
         (fun y ->
            call_fresh
              (fun z ->
                 conj ((===) z !1)
                   (conj ((=/=) x y)
                      (conj ((===) x ((!!) [!0; z; !1]))
                         ((===) y ((!!) [!0; !1; !1]))))))), all answers {
}
fun q ->
  call_fresh
    (fun x ->
       call_fresh
         (fun y ->
            call_fresh
              (fun z ->
                 conj ((===) x ((!!) [!0; z; !1]))
                   (conj ((===) y ((!!) [!0; !1; !1])) ((=/=) x y))))), all answers {
q=_.10;
}
fun q ->
  call_fresh
    (fun x ->
       call_fresh
         (fun y ->
            call_fresh
              (fun z ->
                 conj ((===) z !1)
                   (conj ((===) x ((!!) [!0; z; !1]))
                      (conj ((===) y ((!!) [!0; !1; !1])) ((=/=) x y)))))), all answers {
}
fun q ->
  call_fresh
    (fun x ->
       call_fresh
         (fun y -> conj ((=/=) ((!!) [x; !1]) ((!!) [!2; y])) ((===) x !2))), all answers {
q=_.10;
}
fun q ->
  call_fresh
    (fun x ->
       call_fresh
         (fun y -> conj ((=/=) ((!!) [x; !1]) ((!!) [!2; y])) ((===) y !1))), all answers {
q=_.10;
}
fun q ->
  call_fresh
    (fun x ->
       call_fresh
         (fun y ->
            conj ((=/=) ((!!) [x; !1]) ((!!) [!2; y]))
              ((===) ((!!) [x; y]) q))), all answers {
q=[_.11 [=/= 2]; _.12 [=/= 1]];
}
fun q ->
  call_fresh
    (fun x ->
       call_fresh
         (fun y ->
            conj ((=/=) ((!!) [x; !1]) ((!!) [!2; y]))
              (conj ((===) x !2) ((===) ((!!) [x; y]) q)))), all answers {
q=[2; _.12 [=/= 1]];
}
fun q ->
  call_fresh
    (fun x ->
       call_fresh
         (fun y ->
            conj ((=/=) ((!!) [x; !1]) ((!!) [!2; y]))
              (conj ((===) x !2)
                 (conj ((===) y !9) ((===) ((!!) [x; y]) q))))), all answers {
q=[2; 9];
}
fun q ->
  call_fresh
    (fun a ->
       call_fresh
         (fun d ->
            conj ((===) ((!!) [a; d]) q)
              (conj ((=/=) q ((!!) [!5; !6]))
                 (conj ((===) a !5) ((===) d !6))))), all answers {
}
fun q ->
  call_fresh
    (fun x ->
       call_fresh
         (fun y ->
            conj ((=/=) ((!!) [x; !1]) ((!!) [!2; y]))
              (conj ((===) x !2)
                 (conj ((===) y !1) ((===) ((!!) [x; y]) q))))), all answers {
}
fun q ->
  call_fresh
    (fun a ->
       call_fresh
         (fun x ->
            call_fresh
              (fun z ->
                 conj ((=/=) a ((!!) [x; !1]))
                   (conj ((===) a ((!!) [z; !1])) ((===) x z))))), all answers {
}
fun q ->
  call_fresh
    (fun a ->
       call_fresh
         (fun x ->
            call_fresh
              (fun z ->
                 conj ((=/=) a ((!!) [x; !1]))
                   (conj ((===) a ((!!) [z; !1]))
                      (conj ((===) x !5) ((===) ((!!) [x; z]) q)))))), all answers {
q=[5; _.13 [=/= 5]];
}
fun q -> (=/=) !3 !4, all answers {
q=_.10;
}
fun q -> (=/=) !3 !3, all answers {
}
fun q -> (&&&) ((&&&) ((=/=) !5 q) ((=/=) !6 q)) ((===) q !5), all answers {
}
fun q ->
  call_fresh
    (fun a ->
       call_fresh
         (fun d ->
            conj ((===) ((!!) [a; d]) q)
              (conj ((=/=) q ((!!) [!5; !6])) ((===) a !5)))), all answers {
q=[5; _.12 [=/= 6]];
}
fun q -> call_fresh (fun a -> conj ((===) !3 a) ((=/=) a !4)), all answers {
q=_.10;
}
fun q -> (&&&) ((=/=) !4 q) ((=/=) !3 q), all answers {
q=_.10 [=/= 4; =/= 3];
}
fun q -> (&&&) ((=/=) q !5) ((=/=) q !5), all answers {
q=_.10 [=/= 5];
}
fun q ->
  let foo x = call_fresh (fun a -> (=/=) x a) in call_fresh (fun a -> foo a), all answers {
q=_.10;
}
fun q ->
  call_fresh
    (fun x -> call_fresh (fun y -> conj ((===) ((!!) [x; y]) q) ((=/=) x y))), all answers {
q=[_.11 [=/= _.12]; _.12 [=/= _.11]];
}
fun q ->
  Fresh.two (fun a d -> (?&) [(===) ((!!) [a; d]) q; (=/=) q ((!!) [!5; !6])]), all answers {
q=[_.11 [=/= 5]; _.12 [=/= 6]];
}
fun q ->
  Fresh.two
    (fun a d ->
       (?&) [(===) ((!!) [a; d]) q; (=/=) q ((!!) [!5; !6]); (===) a !3]), all answers {
q=[3; _.12];
}
fun q ->
  call_fresh
    (fun x -> call_fresh (fun y -> conj ((===) ((!!) [x; y]) q) ((=/=) y x))), all answers {
q=[_.11 [=/= _.12]; _.12 [=/= _.11]];
}
fun q ->
  call_fresh
    (fun x ->
       call_fresh
         (fun y ->
            conj ((===) ((!!) [x; y]) q) (conj ((=/=) x y) ((=/=) y x)))), all answers {
q=[_.11 [=/= _.12]; _.12 [=/= _.11]];
}
fun q ->
  call_fresh
    (fun x ->
       call_fresh
         (fun y ->
            conj ((===) ((!!) [x; y]) q) (conj ((=/=) x y) ((=/=) x y)))), all answers {
q=[_.11 [=/= _.12]; _.12 [=/= _.11]];
}
fun q -> (&&&) ((=/=) q !5) ((=/=) !5 q), all answers {
q=_.10 [=/= 5];
}
fun q ->
  call_fresh
    (fun x ->
       call_fresh
         (fun y ->
            conj ((===) ((!!) [x; y]) q)
              (conj ((=/=) ((!!) [x; y]) ((!!) [!5; !6])) ((=/=) x !5)))), all answers {
q=[_.11 [=/= 5]; _.12];
}
fun q ->
  call_fresh
    (fun x ->
       call_fresh
         (fun y ->
            conj ((===) ((!!) [x; y]) q)
              (conj ((=/=) x !5) ((=/=) ((!!) [x; y]) ((!!) [!5; !6]))))), all answers {
q=[_.11 [=/= 5]; _.12];
}
fun q ->
  call_fresh
    (fun x ->
       call_fresh
         (fun y ->
            conj ((=/=) x !5)
              (conj ((=/=) ((!!) [x; y]) ((!!) [!5; !6]))
                 ((===) ((!!) [x; y]) q)))), all answers {
q=[_.11 [=/= 5]; _.12];
}
fun q ->
  call_fresh
    (fun x ->
       call_fresh
         (fun y ->
            conj ((=/=) !5 x)
              (conj ((=/=) ((!!) [x; y]) ((!!) [!5; !6]))
                 ((===) ((!!) [x; y]) q)))), all answers {
q=[_.11 [=/= 5]; _.12];
}
fun q ->
  call_fresh
    (fun x ->
       call_fresh
         (fun y ->
            conj ((=/=) !5 x)
              (conj ((=/=) ((!!) [y; x]) ((!!) [!6; !5]))
                 ((===) ((!!) [x; y]) q)))), all answers {
q=[_.11 [=/= 5]; _.12];
}
fun x ->
  call_fresh
    (fun y ->
       call_fresh
         (fun z -> conj ((=/=) x ((!!) [y; !2])) ((===) x ((!!) [z; !2])))), all answers {
xs=[_.12 [=/= _.11]; 2];
}
fun q ->
  call_fresh
    (fun x ->
       call_fresh
         (fun y ->
            call_fresh
              (fun z ->
                 conj ((=/=) q x)
                   (conj ((=/=) x ((!!) [y])) ((=/=) y ((!!) [z])))))), all answers {
q=_.10 [=/= _.11 [=/= [_.12 [=/= [_.13]]]]];
}
fun q ->
  call_fresh
    (fun x ->
       call_fresh
         (fun y ->
            call_fresh
              (fun z ->
                 conj ((===) x q)
                   (conj (wrap x y) (conj (wrap y z) (wrap z x)))))), all answers {
q=_.10 [=/= [_.14; _.12 [=/= _.15; _.13 [=/= _.16; _.10]]]];
}
fun q -> distincto ((%) !2 ((%<) !3 q)), all answers {
q=_.38 [=/= 2; =/= 3];
}
fun q -> remembero !1 ((%) !1 ((%) !2 ((%<) !1 !3))) q, all answers {
q=[1; 2; 1; 3];
q=[2; 1; 3];
q=[1; 2; 3];
q=[2; 3];
}
fun q -> remembero !1 ((%) !1 ((%<) !2 !3)) ((%) !1 ((%<) !2 !3)), all answers {
q=_.10;
}
fun q -> rembero !1 ((%) !1 ((%) !2 ((%<) !1 !3))) q, all answers {
q=[2; 3];
}
fun q -> rembero !1 ((%) !1 ((%<) !2 !3)) ((%) !1 ((%<) !2 !3)), all answers {
}
