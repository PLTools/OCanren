fun q  -> lookupo (!"x") (inj_list []) q, 1 answer {
}
fun q  -> lookupo (!"x") (inj_list [((!"x"), (!(V (!"x"))))]) q, 1 answer {
q=(V "x"); 
}
fun q  ->
  lookupo (!"x")
    (inj_list [((!"y"), (!(V (!"y")))); ((!"x"), (!(V (!"x"))))]) q, 1 answer {
q=(V "x"); 
}
fun q  ->
  lookupo q (inj_list [((!"y"), (!(V (!"y")))); ((!"x"), (!(V (!"x"))))])
    (!(V (!"x"))), 1 answer {
q=x; 
}
fun q  ->
  lookupo q (inj_list [((!"y"), (!(V (!"y")))); ((!"x"), (!(V (!"x"))))])
    (!(V (!"y"))), 1 answer {
q=y; 
}
fun q  -> lookupo (!"x") q (!(V (!"y"))), 1 answer {
q=[(x, (V "y")); _.13]; 
}
fun q  -> lookupo (!"x") q (!(V (!"y"))), 5 answers {
q=[(x, (V "y")); _.13]; 
q=[(_.11, _.12); (x, (V "y")); _.16]; 
q=[(_.11, _.12); (_.14, _.15); (x, (V "y")); _.19]; 
q=[(_.11, _.12); (_.14, _.15); (_.17, _.18); (x, (V "y")); _.22]; 
q=[(_.11, _.12); (_.14, _.15); (_.17, _.18); (_.20, _.21); (x, (V "y")); _.25]; 
}
fun q  -> infero (!(Abs ((!"x"), (!(X (!"x")))))) q, 1 answer {
q=(Arr (_.14, _.14)); 
}
fun q  ->
  infero
    (!(Abs
         ((!"f"), (!(Abs ((!"x"), (!(App ((!(X (!"f"))), (!(X (!"x"))))))))))))
    q, 1 answer {
q=(Arr ((Arr (_.21, _.18)), (Arr (_.21, _.18)))); 
}
fun q  ->
  infero
    (!(Abs
         ((!"x"), (!(Abs ((!"f"), (!(App ((!(X (!"f"))), (!(X (!"x"))))))))))))
    q, 1 answer {
q=(Arr (_.21, (Arr ((Arr (_.21, _.18)), _.18)))); 
}
fun q  -> infero q (!(Arr ((!(V (!"x"))), (!(V (!"x")))))), 1 answer {
q=(Abs (_.15, (X _.15))); 
}
fun q  -> infero (!(Abs ((!"x"), (!(App ((!(X (!"x"))), (!(X (!"x"))))))))) q, 1 answer {
}
